<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Mathematical Music Theory Adventures</title>
    <link>https://lucio-cornejo.github.io/post/</link>
      <atom:link href="https://lucio-cornejo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 18 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://lucio-cornejo.github.io/media/icon_hu19768c3e65d8c8c972c0381062c2c605_8982_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://lucio-cornejo.github.io/post/</link>
    </image>
    
    <item>
      <title>A glimpse into the world of Voice Leading</title>
      <link>https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/</guid>
      <description>
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://lucio-cornejo.github.io/post/a-glimpse-into-the-world-of-voice-leading/index.en_files/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;this-post-is-not-finished.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;This post is not finished.&lt;/h3&gt;
&lt;p&gt;I’ll continue updating it.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;(The graphs work better if you to open this page not in your cellphone)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;I am going to describe the surprisingly interesting musical phenomenon which
first piqued my interest into how, from certain simple musical questions,
unexpected patterns and relationships can emerge and even be partially explained
through mathematics. However, to make sure that non-musicians can get something
out of this post, I’ll begin describing such musical phenomenon from a mathematical perspective.&lt;/p&gt;
&lt;p&gt;Consider the following experiment:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Pick any circle.&lt;/li&gt;
&lt;li&gt;Choose a &lt;del&gt;chord&lt;/del&gt; finite amount of points contained in that circle.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Transpose&lt;/del&gt; Rotate each of those &lt;del&gt;notes&lt;/del&gt; points, along the chosen circle,
by the same amount and in equal direction (clockwise or anticlowise).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We’ll discuss this step later in the post&lt;/strong&gt;, but the main idea of the following graphs is that every point which has been colored corresponds to a &lt;del&gt;chord&lt;/del&gt; finite set of points in the circle, which satisfies the main property that I’ll explain at length later in this post.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Now comes the good stuff …&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from __future__ import division
import numpy as np
import math

###### OBTENER LOS ACORDES NECESARIOS PARA EL CASO ANY FINITE CHORD SIZE ######

def ordenamiento(lista):
  # Let&amp;#39;s assume that lista is already sorted
  # and that it has at least two elements.
  temporal = []
  for i in range(len(lista)-1):
      temporal.append([lista[0],lista[i+1]])
    
  return temporal
    
def acordes(lista,longitud_acorde):
  # Let&amp;#39;s assume that lista is already sorted
  # and that it has at least two elements.
    
  # It holds acordes(lista,2) = ordenamiento(lista) .
    
  if longitud_acorde == 2:
      return ordenamiento(lista)    
  else:
      temporal = acordes(lista[1:],-1+longitud_acorde)
      for i in temporal:
          i.insert(0,lista[0])  
        
      for j in range(2,len(lista)-1,1):
          temp = acordes(lista[j:],-1+longitud_acorde)
          for i in temp:
              i.insert(0,lista[0])  
          temporal = temporal + temp
      return temporal
            
    
################# GRAFICAR EN BASE AL CONTRARY MOTION DEGREE #################

metric = -1    # Common musical sense of distance.
EDO = 360

def arclenght(a,b):
    temp = b%(2*np.pi)-a
    if abs(temp)&amp;gt;np.pi:
        if temp&amp;gt;0:
            temp = temp - 2*np.pi
        else:
            temp =  temp + 2*np.pi
    return temp
            
    
def dist(a,b,metric):
    if metric == -1:
        return arclenght(a,b) 
    if metric == -2:
        # Voice leading trigonometric formula
        return math.acos(np.cos(b-a))
    if metric == -3:
        # Directional arc lenght trigonometric formula
        return 2*math.atan(np.tan((b-a)/2.0))
    if metric == -4:
        # Euclidean type metrics
        #blank = (np.cos(a)-np.cos(b))**power + (np.sin(a)-np.sin(b))**power
        #return pow(blank,1.0/power)
        blank = [abs(np.cos(a)-np.cos(b)),abs(np.sin(a)-np.sin(b))]
        return max(blank)


def CPM(theta,Y,metric):  # Cyclic permutations matrix 
    m = len(Y)
    T = [(Y[i]+theta) for i in range(m)]
    GT = []
    GT.append(T)
    for i in range(1,m,1):
        temp = [T[(k+i)%m] for k in range(m)]
        GT.append(temp)
    
    mat = [[] for k in range(m)]
    for i in range(m):
        for j in range(m):
            mat[i].append(dist(Y[j],GT[i][j],metric))
            
    if abs(theta-np.pi)&amp;lt;0.001:
        for j in range(m):
            mat[0][j] = abs(mat[0][j])
        # This is kinda unnecesary seems the minimum
        # voice leading will probably not happen
        # with the voice motion of the first row,
        # because that&amp;#39;s the most spread out voice leading
        # out of all the cases of the GT.
                 
    VL = [0 for i in range(m)]   
    RS = [0 for i in range(m)]
    minimal = 0
    
    for i in range(m):
        for j in range(m):
            VL[i] = VL[i] + abs(mat[i][j])
            RS[i] = RS[i] + mat[i][j]
           
        if VL[i] &amp;lt; VL[minimal]:
            minimal = i
            
    # Convert radians into the appropiate EDO tuning system
    rescale_1 = [i*(EDO/(2*np.pi)) for i in VL]
    rescale_2 = [i*(EDO/(2*np.pi)) for i in RS]
     
    # Contrary Motion Degree
    CMD = [rescale_1[i]-abs(rescale_2[i]) for i in range(m)]    
        
    return [rescale_1,CMD,minimal]


def graphic_data(chord_size,rotation,even_uno,even_dos,partition_precision):
  chord_size = int(chord_size) 
  partition_precision = int(partition_precision)
  even_uno = int(even_uno)
  even_dos = int(even_dos)
  temp = chord_size*partition_precision
  axis_X = [i*((2*np.pi)/temp) for i in range(0,temp,1)]
  
  rotation = rotation*(np.pi/180)
  chords = acordes(axis_X,chord_size)
  
  # List positions of most even chord of chord_size notes:
  # n*partition_precision, for n in {0,1,2, ... ,chord_size}
  edo_angle_1 = axis_X[even_uno*partition_precision]
  edo_angle_2 = axis_X[even_dos*partition_precision]
  
  if chord_size == 5:
      chords = [chords[i] for i in range(len(chords)) if edo_angle_1 in chords[i] ]
  elif chord_size == 6:
      chords = [chords[i] for i in range(len(chords)) if (edo_angle_1 in chords[i]) and (edo_angle_2 in chords[i]) ]
  
  areas = []
  area_size = 1
  results = []
  minimum_voice_leadings = []
  
  for i in range(len(chords)):
      temp = CPM(rotation,chords[i],metric)
      minimum_voice_leadings.append(temp[0][temp[2]])
      results.append(temp[1][temp[2]]) #########################################
      if abs(results[i])&amp;lt;0.001:
          areas.append(area_size)
      else:
          areas.append(0)
          
  # Positions related to the chords with contrary motion during such voice leading
  positions = []
  for i in range(len(areas)):
      if areas[i] == 1: 
          positions.append(i)
      
  # Relevant voice leadings
  minimum_voice_leadings = [minimum_voice_leadings[i] for i in positions]
        
  rotation = round(rotation*(180/np.pi),3) # From radians to degress
          
  if chord_size == 2:
      # Convert radians to EDO semitones
      axis_X = [ chords[i][1]*(EDO/(2*np.pi))  for i in positions ]
      axis_Y = [ 0 for i in positions ]
      axis_Z = [ 0 for i in positions ]
      
  elif chord_size == 3:
      # Convert radians to EDO semitones
      axis_X = [ chords[i][2]*(EDO/(2*np.pi))  for i in positions ]
      axis_Y = [ chords[i][1]*(EDO/(2*np.pi))  for i in positions ]
      axis_Z = [ 0 for i in positions ] # minimum_voice_leadings

  elif chord_size == 4:
      # Convert radians to EDO semitones
      axis_X = [ chords[i][3]*(EDO/(2*np.pi))  for i in positions ]
      axis_Y = [ chords[i][2]*(EDO/(2*np.pi))  for i in positions ] 
      axis_Z = [ chords[i][1]*(EDO/(2*np.pi))  for i in positions ]
  
  elif chord_size == 5:
      for i in chords:
          i.remove(edo_angle_1)
          
      axis_X = [ chords[i][3]*(EDO/(2*np.pi))  for i in positions ]
      axis_Y = [ chords[i][2]*(EDO/(2*np.pi))  for i in positions ]
      axis_Z = [ chords[i][1]*(EDO/(2*np.pi))  for i in positions ]
      
  elif chord_size == 6:
      for i in chords:
          i.remove(edo_angle_1)
          i.remove(edo_angle_2)
      
      axis_X = [ chords[i][3]*(EDO/(2*np.pi))  for i in positions ]
      axis_Y = [ chords[i][2]*(EDO/(2*np.pi))  for i in positions ]
      axis_Z = [ chords[i][1]*(EDO/(2*np.pi))  for i in positions ]
      
  return [axis_X,axis_Y,axis_Z,minimum_voice_leadings,EDO,chord_size,rotation]
        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Reader: &lt;em&gt;Ok, so what the hell was that?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Author: &lt;em&gt;Yeah … sorry for the spoilers. Now I’ll provide the necessary background to understand step 4.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visual-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visual examples&lt;/h2&gt;
&lt;p&gt;From a musical perspective, we’ll be dealing with &lt;strong&gt;chords&lt;/strong&gt; (finite collections
of at least two distinct notes) and their &lt;strong&gt;transpositions&lt;/strong&gt; (translating them by some distance),
but, from a mathematical perspective, we only need to follow the already mentioned
steps 1, 2 and 3.&lt;/p&gt;
&lt;p&gt;We’ll work with the unitary circle, the circle with radius 1 and whose
center is the origin of the Cartesian Plane.
Each point in the unitary circle can be thought of as a possible musical note,
if we conveniently match them.&lt;/p&gt;
&lt;p&gt;In that sense, let’s work with the following pairing:&lt;/p&gt;
&lt;!--
Creating a table using HTML 
--&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;
Note
&lt;/th&gt;
&lt;td&gt;
C
&lt;/td&gt;
&lt;td&gt;
Db
&lt;/td&gt;
&lt;td&gt;
D
&lt;/td&gt;
&lt;td&gt;
Eb
&lt;/td&gt;
&lt;td&gt;
E
&lt;/td&gt;
&lt;td&gt;
F
&lt;/td&gt;
&lt;td&gt;
Gb
&lt;/td&gt;
&lt;td&gt;
G
&lt;/td&gt;
&lt;td&gt;
Ab
&lt;/td&gt;
&lt;td&gt;
A
&lt;/td&gt;
&lt;td&gt;
Bb
&lt;/td&gt;
&lt;td&gt;
B
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;
Angle
&lt;/th&gt;
&lt;td&gt;
$ (0/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (1/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (2/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (3/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (4/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (5/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (6/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (7/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (8/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (9/12)*360^{°} $
&lt;/td&gt;
&lt;td&gt;
$ (10/12)*360^{°}$
&lt;/td&gt;
&lt;td&gt;
$ (11/12)*360^{°}$
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let’s start with a simple case: The &lt;strong&gt;major&lt;/strong&gt; chord&lt;/p&gt;
&lt;p&gt;Consider the C major chord, {C, E, G}, which we can represent in the Cartesian
Plane as the following set of points:&lt;/p&gt;
&lt;p&gt;C : &lt;span class=&#34;math inline&#34;&gt;\(\left(\cos(0^{°}),\sin(0^{°})\right)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;E : &lt;span class=&#34;math inline&#34;&gt;\(\left(\cos(120^{°}),\sin(120^{°})\right)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;G : &lt;span class=&#34;math inline&#34;&gt;\(\left(\cos(210^{°}),\sin(210^{°})\right)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s rotate each of those three points by &lt;span class=&#34;math inline&#34;&gt;\(60^{°}\)&lt;/span&gt; with respect to the
origin, as we can see in the following animation (click it), where the initial
points shown correspond to the notes C, E and G, in that order:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PQR-SIyslos&amp;amp;ab_channel=LucioCornejo&#34;&gt;&lt;img src=&#34;https://i.imgur.com/5pTAgV4.png&#34; style=&#34;width:100.0%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From a musical perspective, we’ve &lt;strong&gt;transposed&lt;/strong&gt; the C major chord by 2 semitones
and landed on D major, but, mathematically, we can think of having &lt;em&gt;rotated&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;set of trajectories&lt;/strong&gt; that the notes from C major take &lt;em&gt;along the unitary circle&lt;/em&gt;
to get to the notes in D major is called the &lt;strong&gt;voice leading&lt;/strong&gt;
between C major and D major.&lt;/p&gt;
&lt;p&gt;Let me clarify that the voice leadings which we’ll be dealing with in this post are precisely those which satisfy that &lt;strong&gt;no pair of distinct notes from the initial chord end up at the same note in the transposed chord.&lt;/strong&gt; In that sense, when we tranpose/rotate any
chord made up of &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; notes, the number of possible voice leadings between such
chord and its transposition is precisely
&lt;span class=&#34;math inline&#34;&gt;\(n! = n\cdot(n-1)\cdot(\dots)\cdot 2 \cdot 1 \enspace\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Going back to our concrete case, let’s see some voice leading examples for the
transposition from C major to D major:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_rC3cHZCAYo&amp;amp;ab_channel=LucioCornejo&#34;&gt;&lt;img src=&#34;https://i.imgur.com/NQhbjLP.png&#34; style=&#34;width:100.0%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice from the video that the trajectories which define the voice leading correspond
to the shortest of the two paths that a point could have taken to get to the other.
In the case where both paths have the same length, that is, for a &lt;span class=&#34;math inline&#34;&gt;\(180^{°}\)&lt;/span&gt;
rotation, we’ll choose, as a convention, the anticlockwise trajectory
to be a part of the voice leading.&lt;/p&gt;
&lt;p&gt;In this post, we’ll focus on two properties that we’d like a voice leading (&lt;em&gt;VL&lt;/em&gt;)
between a chord and some of its transpositions to have:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The sum of the &lt;strong&gt;length of the trajectories&lt;/strong&gt; which define &lt;em&gt;VL&lt;/em&gt;, also known as the &lt;strong&gt;voice leading size&lt;/strong&gt;, is the &lt;strong&gt;smallest one&lt;/strong&gt; out of all the possible voice leadings between the initial chord and its transposition. &lt;br&gt; Any voice leading which satisfies this property is said to be a &lt;strong&gt;minimal voice leading&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The trajectories which define &lt;em&gt;VL&lt;/em&gt; share the same direction, that is, they are
&lt;strong&gt;all clockwise&lt;/strong&gt; or &lt;strong&gt;all anticlockwise&lt;/strong&gt;. &lt;br&gt; Any voice leading which satisfies this
property is said to have &lt;strong&gt;no contrary motion&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Partly, what I’ve shown you in the initial graphs is which chords, of some fixed
chord size, satisfy that after transposing/rotating them by a certain amount,
there exists a voice leading, between the initial and transposed chord, that is
a &lt;em&gt;minimal voice leading&lt;/em&gt; and &lt;em&gt;has no contrary motion&lt;/em&gt;. If some chord satisfies
such property, we’ll say that it has an &lt;strong&gt;unidirectional minimal voice leading&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I wouldn’t blame you if you were just thinking the following:
&lt;br&gt; “Why would a minimal voice leading be unidirectional?.
The properties 1. and 2. do &lt;strong&gt;NOT&lt;/strong&gt; seem related at all”.
&lt;br&gt; You’d be partly right, in fact, because the property 1. deals with
minimizing trajectory lenghts, while the property 2. refers only to such
trajectory’s directions.&lt;/p&gt;
&lt;p&gt;However, both properties happen to be fairly related; and even extremely related
when we focus on &lt;span class=&#34;math inline&#34;&gt;\(180^{°}\)&lt;/span&gt; rotations of chords, a situation where symmetry
arises with respect to the possible voice leadings. But, such connection will
be explored in the next post because that’s a deep subject as well.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Let’s get back to our example, rotating the C major chord, {C,E,G},
by &lt;span class=&#34;math inline&#34;&gt;\(60^{°}\)&lt;/span&gt;. &lt;br&gt;
Does it exist an unidirectional minimal voice leading in that case?&lt;/p&gt;
&lt;p&gt;After checking by hand the &lt;span class=&#34;math inline&#34;&gt;\(3! = 6\)&lt;/span&gt; possible voice leadings,
we actually find two unidirectional minimal voice leadings, precisely
the ones labeled in the second video of this post
as &lt;em&gt;voice leading 1&lt;/em&gt;, which is comprised of anticlockwise trajectories,
and &lt;em&gt;voice leading 3&lt;/em&gt;, which is comprised of clockwise trajectories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Curious fact:&lt;/strong&gt; Due to C major having only &lt;em&gt;three&lt;/em&gt; distinct notes, we actually
only needed to check &lt;em&gt;three&lt;/em&gt; special kinds of voice leadings in order to find
one which is, at least, a minimal voice leading.
&lt;br&gt; The theorem that allows such an inmense reduction in the number of voice
leadings that we need to check in order to find a minimal voice leading will
play a &lt;strong&gt;key role&lt;/strong&gt; in the next post.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-all-together&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;Uyuyui.&lt;/p&gt;
&lt;p&gt;We are 90% ready to understand the graphs shown previously.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;first step&lt;/em&gt; is to &lt;strong&gt;choose a chord size&lt;/strong&gt;, that is, the amount
of distinct points in a circle that we will be rotating afterwards.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;second step&lt;/em&gt; is to &lt;strong&gt;chose some rotation&lt;/strong&gt; that we will apply to
chords with a size already chosen.chosen.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Thanks for reading!
This one post took a huge amount of work, so I am glad you made it till here.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://lucio-cornejo.github.io/post/getting-started/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://lucio-cornejo.github.io/post/getting-started/</guid>
      <description>
&lt;script src=&#34;https://lucio-cornejo.github.io/post/getting-started/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;useful-links-for-this-new-adventure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Useful links for this new adventure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://revistas.pucp.edu.pe/index.php/promathematica/article/view/8188/8484&#34;&gt;La Matemática en la Música&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://revistas.pucp.edu.pe/index.php/promathematica/article/view/8216/8517&#34;&gt;Matemática en la Musicología&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ru.dgb.unam.mx/browse?type=author&amp;amp;value=Montiel+Hernandez%2C+Mariana&#34;&gt;Matemáticas y música: perspectivas a través del tiempo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/user/vornskr181st/videos&#34;&gt;Voice leading lecture series&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/0705.4085.pdf&#34;&gt;The Distance Geometry of Music&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://alpof.wordpress.com/category/music/math-music/&#34;&gt;Mathematical Music Theory Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jstor.org/stable/25171405?seq=1&#34;&gt;Scale Theory, Serial Theory and Voice Leading&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jstor.org/stable/745935?seq=1&#34;&gt;Aspects of Well-Formed Scales&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jstor.org/stable/3679467?seq=1&#34;&gt;The Group-Theoretic Description of 12-Fold and Microtonal Pitch Systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ru.dgb.unam.mx/browse?type=author&amp;amp;value=Gomez+Tellez%2C+Jesus+David&#34;&gt;La Teoria de Números y la Teoría de Grupos en el estudio de escalas musicales microtonales&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://trace.tennessee.edu/cgi/viewcontent.cgi?referer=https://www.google.com/&amp;amp;httpsredir=1&amp;amp;article=2692&amp;amp;context=utk_gradthes&#34;&gt;Essential Neo-Riemannian Theory for Today’s Musician&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.tandfonline.com/doi/full/10.1080/17459737.2019.1696899?src=recsys&amp;amp;&#34;&gt;Axiomatic Scale Theory&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
